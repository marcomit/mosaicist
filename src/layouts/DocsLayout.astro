---
import Layout from '../components/Layout.astro';
import "../styles/global.css";

export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
const fullTitle = `${title} - Mosaic Documentation`;

// Get current URL to determine active navigation
const currentPath = Astro.url.pathname;
---

<Layout title={fullTitle} description={description}>
  <main class="min-h-screen bg-cream text-charcoal">
    <!-- Sketchy Header -->
    <header class="relative px-6 py-8 bg-slate-50 border-b-2 border-charcoal">
      <div class="max-w-7xl mx-auto">
        <div class="flex items-center gap-6 mb-6">
          <!-- Hand-drawn Mini Logo -->
          <a href="/" class="mini-logo-link">
            <div class="mini-logo">
              <div class="mini-fragment mini-left"></div>
              <div class="mini-fragment mini-center"></div>
              <div class="mini-fragment mini-right"></div>
            </div>
          </a>
          
          <div>
            <a href="/docs" class="text-2xl font-medium text-charcoal hover:text-orange-500 transition-colors flex items-center gap-2" style="font-family: 'Inter', sans-serif;">
              <svg width="20" height="16" viewBox="0 0 20 16" class="sketchy-arrow-back">
                <path d="M8 2 L2 8 L8 14 M2 8 L18 8" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Documentation
            </a>
            <p class="text-sm text-slate-600 mt-1 font-tiempos">{title}</p>
          </div>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-6 py-8">
      <div class="grid lg:grid-cols-5 gap-12">
        <!-- Enhanced Sidebar Navigation -->
        <aside class="lg:col-span-1">
          <nav class="sticky top-8 space-y-6">
            <!-- Quick Start -->
            <div class="nav-section">
              <h3 class="text-lg font-semibold text-charcoal mb-4 flex items-center gap-3 font-styrene">
                <div class="nav-icon quick-start-icon"></div>
                Quick Start
              </h3>
              <ul class="space-y-1">
                <li><a href="/docs" class={`nav-link ${currentPath === '/docs' || currentPath === '/docs/' ? 'active' : ''}`}>Overview</a></li>
                <li><a href="/docs/installation" class={`nav-link ${currentPath === '/docs/installation' ? 'active' : ''}`}>Installation</a></li>
                <li><a href="/docs/quick-start" class={`nav-link ${currentPath === '/docs/quick-start' ? 'active' : ''}`}>Quick Start</a></li>
                <li><a href="/docs/configuration" class={`nav-link ${currentPath === '/docs/configuration' ? 'active' : ''}`}>Configuration</a></li>
              </ul>
            </div>

            <!-- Architecture -->
            <div class="nav-section">
              <h3 class="text-lg font-semibold text-charcoal mb-4 flex items-center gap-3 font-styrene">
                <div class="nav-icon architecture-icon"></div>
                Architecture
              </h3>
              <ul class="space-y-1">
                <li><a href="/docs/architecture" class={`nav-link ${currentPath === '/docs/architecture' ? 'active' : ''}`}>Overview</a></li>
                <li><a href="/docs/modules" class={`nav-link ${currentPath === '/docs/modules' ? 'active' : ''}`}>Modules</a></li>
                <li><a href="/docs/events" class={`nav-link ${currentPath === '/docs/events' ? 'active' : ''}`}>Events</a></li>
                <li><a href="/docs/routing" class={`nav-link ${currentPath === '/docs/routing' ? 'active' : ''}`}>Routing</a></li>
                <li><a href="/docs/ui-injection" class={`nav-link ${currentPath === '/docs/ui-injection' ? 'active' : ''}`}>UI Injection</a></li>
              </ul>
            </div>

            <!-- Guides -->
            <div class="nav-section">
              <h3 class="text-lg font-semibold text-charcoal mb-4 flex items-center gap-3 font-styrene">
                <div class="nav-icon guides-icon"></div>
                Guides
              </h3>
              <ul class="space-y-1">
                <li><a href="/docs/guides/creating-modules" class={`nav-link ${currentPath === '/docs/guides/creating-modules' ? 'active' : ''}`}>Creating Modules</a></li>
                <li><a href="/docs/guides/event-patterns" class={`nav-link ${currentPath === '/docs/guides/event-patterns' ? 'active' : ''}`}>Event Patterns</a></li>
                <li><a href="/docs/guides/testing" class={`nav-link ${currentPath === '/docs/guides/testing' ? 'active' : ''}`}>Testing</a></li>
                <li><a href="/docs/guides/best-practices" class={`nav-link ${currentPath === '/docs/guides/best-practices' ? 'active' : ''}`}>Best Practices</a></li>
              </ul>
            </div>

            <!-- API Reference -->
            <div class="nav-section">
              <h3 class="text-lg font-semibold text-charcoal mb-4 flex items-center gap-3 font-styrene">
                <div class="nav-icon api-icon"></div>
                API Reference
              </h3>
              <ul class="space-y-1">
                <li><a href="/docs/api/core" class={`nav-link ${currentPath === '/docs/api/core' ? 'active' : ''}`}>Core Classes</a></li>
                <li><a href="/docs/api/utilities" class={`nav-link ${currentPath === '/docs/api/utilities' ? 'active' : ''}`}>Utilities</a></li>
                <li><a href="/docs/api/widgets" class={`nav-link ${currentPath === '/docs/api/widgets' ? 'active' : ''}`}>Widgets</a></li>
              </ul>
            </div>

            <!-- Hand-drawn decoration -->
            <div class="mt-12">
              <svg width="120" height="40" viewBox="0 0 120 40" class="opacity-30">
                <path d="M10 20 Q30 10 60 20 T110 15" stroke="#FB923C" stroke-width="2" fill="none" stroke-linecap="round"/>
                <circle cx="20" cy="18" r="2" fill="#FB923C"/>
                <circle cx="50" cy="22" r="1.5" fill="#60A5FA"/>
                <circle cx="90" cy="16" r="2.5" fill="#4ADE80"/>
              </svg>
            </div>
          </nav>
        </aside>

        <!-- Main Content Area -->
        <main class="lg:col-span-3">
          <!-- Hand-drawn content border -->
          <div class="absolute inset-0 pointer-events-none lg:block hidden">
            <svg class="w-full h-full" viewBox="0 0 400 600" preserveAspectRatio="none">
              <rect x="10" y="10" width="380" height="580" 
                    stroke="#E2E8F0" 
                    stroke-width="2" 
                    fill="none" 
                    stroke-dasharray="5,3"
                    opacity="0.3"/>
            </svg>
          </div>
          
          <article class="prose-mosaic relative z-10">
            <slot />
          </article>

          <!-- Next/Previous Navigation -->
          <nav class="mt-16 pt-8 border-t-2 border-slate-200">
            <div class="flex justify-between items-center">
              <div class="prev-page">
                <!-- Will be populated by navigation logic -->
              </div>
              <div class="next-page">
                <!-- Will be populated by navigation logic -->
              </div>
            </div>
          </nav>
        </main>

        <!-- Table of Contents Sidebar -->
        <aside class="lg:col-span-1 hidden lg:block">
          <div class="sticky top-8">
            <!-- Fixed: Removed transform rotation and improved styling -->
            <div class="toc-container p-6 bg-slate-50/80 backdrop-blur-sm border-2 border-slate-200 rounded-lg shadow-sm">
              <div class="absolute -top-3 left-6 bg-cream px-3 py-1 rounded">
                <span class="text-sm font-medium text-slate-600 font-styrene">On this page</span>
              </div>
              
              <!-- Table of Contents will be generated by JavaScript -->
              <nav class="toc-nav mt-2">
                <ul id="toc-list" class="space-y-1">
                  <!-- TOC items will be inserted here -->
                </ul>
              </nav>
            </div>
          </div>
        </aside>
      </div>
    </div>

    <!-- Reading progress indicator -->
    <div class="fixed top-0 left-0 right-0 z-50">
      <div id="reading-progress" class="h-1 bg-gradient-to-r from-orange-400 to-orange-600 transition-all duration-300 ease-out" style="width: 0%"></div>
    </div>

    <!-- Footer with sketchy elements -->
    <footer class="bg-slate-50 border-t-2 border-charcoal mt-24 py-16">
      <div class="max-w-7xl mx-auto px-6">
        <div class="text-center">
          <p class="text-slate-600 font-tiempos">
            Built with love for modular Flutter development
          </p>
          
          <!-- Hand-drawn footer decoration -->
          <svg width="200" height="30" viewBox="0 0 200 30" class="mx-auto mt-8 opacity-40">
            <path d="M20 15 Q50 5 100 15 T180 12" 
                  stroke="#FB923C" 
                  stroke-width="1.5" 
                  fill="none" 
                  stroke-linecap="round"/>
          </svg>
        </div>
      </div>
    </footer>
  </main>

  <style>
    /* Enhanced navigation styles */
    .mini-logo-link {
      transition: transform 0.2s ease;
    }
    
    .mini-logo-link:hover {
      transform: scale(1.1) rotate(5deg);
    }

    /* Sketchy Arrow Animation */
    .sketchy-arrow-back {
      transition: transform 0.2s ease;
    }
    
    .sketchy-arrow-back:hover {
      transform: translateX(-3px);
    }

    /* Fixed Table of Contents Styles */
    .toc-container {
      max-height: calc(100vh - 120px);
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: var(--orange-400) var(--slate-100);
      position: relative;
    }

    .toc-container::-webkit-scrollbar {
      width: 4px;
    }

    .toc-container::-webkit-scrollbar-track {
      background: var(--slate-100);
      border-radius: 2px;
    }

    .toc-container::-webkit-scrollbar-thumb {
      background: var(--orange-400);
      border-radius: 2px;
    }

    .toc-nav ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .toc-nav li {
      position: relative;
    }

    .toc-nav a {
      color: var(--slate-600);
      text-decoration: none;
      display: block;
      padding: 8px 12px;
      border-left: 3px solid transparent;
      transition: all 0.3s ease;
      font-size: 14px;
      line-height: 1.4;
      position: relative;
      border-radius: 0 4px 4px 0;
    }

    .toc-nav a:hover {
      color: var(--orange-600);
      border-left-color: var(--orange-300);
      background-color: rgba(251, 146, 60, 0.08);
      transform: translateX(2px);
    }

    .toc-nav a.active {
      color: #FFFFFF !important;
      background: linear-gradient(135deg, #F97316, #EA580C) !important;
      border-left-color: #FFFFFF !important;
      font-weight: 700 !important;
      transform: translateX(4px) !important;
      box-shadow: 2px 2px 8px rgba(249, 115, 22, 0.4) !important;
      border-radius: 0 6px 6px 0 !important;
    }

    .toc-nav a.active::before {
      content: '►' !important;
      position: absolute;
      left: 8px;
      top: 50%;
      transform: translateY(-50%);
      width: auto !important;
      height: auto !important;
      background-color: transparent !important;
      border-radius: 0 !important;
      box-shadow: none !important;
      color: #FFFFFF;
      font-size: 10px;
    }

    /* Nested TOC items for different heading levels */
    .toc-h1 a {
      font-weight: 600;
      font-size: 15px;
      padding: 10px 12px;
      color: var(--slate-700);
    }

    .toc-h2 a {
      font-size: 14px;
      padding: 8px 12px 8px 20px;
      color: var(--slate-600);
    }

    .toc-h3 a {
      font-size: 13px;
      padding: 6px 12px 6px 28px;
      color: var(--slate-500);
      opacity: 0.9;
    }

    .toc-h4 a {
      font-size: 12px;
      padding: 5px 12px 5px 36px;
      color: var(--slate-500);
      opacity: 0.8;
    }

    /* Active states for nested items */
    .toc-h2 a.active,
    .toc-h3 a.active,
    .toc-h4 a.active {
      opacity: 1;
      color: var(--orange-700);
    }

    /* Navigation between pages */
    .prev-page, .next-page {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .nav-page-link {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 16px;
      background: var(--slate-50);
      border: 2px solid var(--slate-200);
      border-radius: 8px;
      text-decoration: none;
      color: var(--charcoal);
      transition: all 0.2s ease;
      transform: rotate(-0.5deg);
    }

    .nav-page-link:hover {
      transform: rotate(0deg) translateY(-2px);
      border-color: var(--orange-400);
      box-shadow: 3px 3px 0px var(--orange-400);
    }

    .nav-page-link .page-direction {
      font-size: 12px;
      color: var(--slate-500);
      font-weight: 500;
    }

    .nav-page-link .page-title {
      font-weight: 600;
      color: var(--charcoal);
    }

    /* Reading progress indicator */
    #reading-progress {
      background: linear-gradient(90deg, #FB923C, #F97316, #EA580C);
      box-shadow: 0 2px 4px rgba(251, 146, 60, 0.3);
    }

    /* Responsive improvements */
    @media (max-width: 1024px) {
      .toc-container {
        display: none;
      }
    }

    @media (max-width: 768px) {
      .nav-section h3 {
        font-size: 1rem;
      }
      
      .nav-link {
        padding: 8px 12px;
        font-size: 15px;
      }

      .grid.lg\\:grid-cols-5 {
        grid-template-columns: 1fr;
      }
      
      aside:first-of-type {
        order: 2;
      }
      
      main {
        order: 1;
      }
    }

    /* Print styles */
    @media print {
      .nav-section,
      footer,
      .toc-container,
      #reading-progress {
        display: none;
      }
      
      main {
        grid-column: 1 / -1;
      }
      
      .prose-mosaic {
        max-width: none;
      }
    }

    /* Dark mode support (if needed) */
    @media (prefers-color-scheme: dark) {
      :root {
        --cream: #1F2937;
        --charcoal: #F9FAFB;
        --slate-50: #374151;
        --slate-100: #4B5563;
      }
    }
  </style>

  <!-- Enhanced Table of Contents JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      generateTableOfContents();
      setupReadingProgress();
      setupSmoothScrolling();
      setupScrollHighlighting();
    });

    function generateTableOfContents() {
      const tocList = document.getElementById('toc-list');
      const headings = document.querySelectorAll('.prose-mosaic h1, .prose-mosaic h2, .prose-mosaic h3, .prose-mosaic h4');
      
      if (!tocList || headings.length === 0) return;

      let tocHTML = '';
      
      headings.forEach((heading, index) => {
        // Create ID if it doesn't exist
        if (!heading.id) {
          heading.id = heading.textContent
            .toLowerCase()
            .replace(/[^a-z0-9]+/g, '-')
            .replace(/^-+|-+$/g, '');
        }

        const level = parseInt(heading.tagName.charAt(1));
        const text = heading.textContent;
        
        // Create nested structure with proper classes
        let className = `toc-h${level}`;

        tocHTML += `
          <li class="${className}">
            <a href="#${heading.id}" class="toc-link" data-target="${heading.id}" data-level="${level}">
              ${text}
            </a>
          </li>
        `;
      });
      
      tocList.innerHTML = tocHTML;

      // Add click handlers for smooth scrolling
      const tocLinks = document.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const targetId = this.getAttribute('data-target');
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            // Calculate offset to account for header
            const headerOffset = 100;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
            
            // Update active state immediately
            setTimeout(() => {
              updateActiveTocItem(targetId);
            }, 150);
          }
        });
      });
    }

    function setupScrollHighlighting() {
      // Simple and reliable scroll-based highlighting
      let isScrolling = false;
      
      function highlightCurrentSection() {
        const headings = document.querySelectorAll('.prose-mosaic h1, .prose-mosaic h2, .prose-mosaic h3, .prose-mosaic h4');
        if (headings.length === 0) return;

        const scrollTop = window.pageYOffset;
        const viewportHeight = window.innerHeight;
        const triggerPoint = scrollTop + 150; // 150px from top of viewport

        let currentHeading = null;

        // Find the heading that should be active
        for (let i = headings.length - 1; i >= 0; i--) {
          const heading = headings[i];
          const headingTop = heading.offsetTop;
          
          if (headingTop <= triggerPoint) {
            currentHeading = heading;
            break;
          }
        }

        // If we're at the very top, use the first heading
        if (!currentHeading && scrollTop < 100) {
          currentHeading = headings[0];
        }

        // Update the active TOC item
        if (currentHeading && currentHeading.id) {
          updateActiveTocItem(currentHeading.id);
        }
      }

      // Throttled scroll listener for better performance
      window.addEventListener('scroll', function() {
        if (!isScrolling) {
          window.requestAnimationFrame(function() {
            highlightCurrentSection();
            isScrolling = false;
          });
          isScrolling = true;
        }
      });

      // Initial highlight on page load
      setTimeout(highlightCurrentSection, 100);
    }

    function setupReadingProgress() {
      const progressBar = document.getElementById('reading-progress');
      if (!progressBar) return;

      window.addEventListener('scroll', function() {
        const article = document.querySelector('.prose-mosaic');
        if (!article) return;

        const articleTop = article.offsetTop;
        const articleHeight = article.offsetHeight;
        const windowHeight = window.innerHeight;
        const scrollTop = window.pageYOffset;

        // Calculate progress
        const articleBottom = articleTop + articleHeight;
        const windowBottom = scrollTop + windowHeight;

        let progress = 0;
        if (scrollTop > articleTop) {
          const totalReadable = articleHeight - windowHeight + articleTop;
          const currentProgress = scrollTop - articleTop;
          progress = Math.min(100, (currentProgress / totalReadable) * 100);
        }

        progressBar.style.width = `${Math.max(0, progress)}%`;
      });
    }

    function updateActiveTocItem(activeId) {
      if (!activeId) return;

      // Remove active class from all items
      const tocLinks = document.querySelectorAll('.toc-link');
      tocLinks.forEach(link => {
        link.classList.remove('active');
      });

      // Add active class to current item
      const activeLink = document.querySelector(`[data-target="${activeId}"]`);
      if (activeLink) {
        activeLink.classList.add('active');
        
        // Visual feedback - you'll see this in console
        console.log('✅ TOC Updated - Active section:', activeId);
        
        // Scroll TOC to show active item smoothly
        scrollTocToActiveItem(activeLink);
        
        // Update URL hash without triggering scroll
        if (history.replaceState) {
          history.replaceState(null, null, '#' + activeId);
        }
      }
    }

    function scrollTocToActiveItem(activeLink) {
      const tocContainer = document.querySelector('.toc-container');
      if (!tocContainer || !activeLink) return;

      const containerRect = tocContainer.getBoundingClientRect();
      const linkRect = activeLink.getBoundingClientRect();
      
      // Check if the active link is outside the visible area
      if (linkRect.top < containerRect.top || linkRect.bottom > containerRect.bottom) {
        const scrollTop = activeLink.offsetTop - tocContainer.offsetTop - (tocContainer.clientHeight / 2);
        tocContainer.scrollTo({
          top: Math.max(0, scrollTop),
          behavior: 'smooth'
        });
      }
    }

    function setupSmoothScrolling() {
      // Enhance all anchor links in the document
      const anchorLinks = document.querySelectorAll('a[href^="#"]');
      
      anchorLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          const href = this.getAttribute('href');
          if (href === '#') return;
          
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            e.preventDefault();
            
            // Calculate offset to account for header
            const headerOffset = 100;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
            
            // Update TOC after smooth scroll
            setTimeout(() => {
              updateActiveTocItem(targetId);
            }, 150);
          }
        });
      });
    }

    // Handle initial load with hash in URL
    window.addEventListener('load', function() {
      if (window.location.hash) {
        const targetId = window.location.hash.substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          setTimeout(() => {
            const headerOffset = 100;
            const elementPosition = targetElement.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

            window.scrollTo({
              top: offsetPosition,
              behavior: 'smooth'
            });
            updateActiveTocItem(targetId);
          }, 200);
        }
      }
    });
  </script>
</Layout>
